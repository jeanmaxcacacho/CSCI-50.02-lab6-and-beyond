* CACACHO, Jean Maximus
* DURON, Joseph Jr
* ONG, Paolo Gabriel


.include "8clocks.jsim"
.include "nominal.jsim"
.include "stdcell.jsim"


* full-adder
.subckt fa a b c_in sum c_out
Xsub1 a b axorb xor2
Xsub2 axorb c_in sum xor2
Xsub3 a b firstnand nand2
Xsub4 axorb c_in secondnand nand2
Xsub5 firstnand secondnand c_out nand2
.ends


* 32-bit full-adder
.subckt add32 a[31:0] b[31:0] c_in0 sum[31:0] c_out[31:30]
Xsub1 a[31:0] b[31:0] c_out[30:0] c_in0 sum[31:0] c_out[31:0] fa
.ends


* 32-bit increment
.subckt counter32 reset a[31:0] f[31:0] clk
Xsum a[31:0] f[31:0] 0 sum[31:0] c31 c30 add32
Xmux2 reset#32 sum[31:0] 0#32 next_val[31:0] mux2
Xdreg next_val[31:0] clk#32 f[31:0] dreg
.ends


* 32-bit adder-subtractor
.subckt as32 a[31:0] b[31:0] op0 fas[31:0] n v z
Xinvert op0#32 b[31:0] notb[31:0] xor2

Xadd a[31:0] notb[31:0] op0 fas[31:0] c31 c30 add32

.connect fas31 n

Xoverflow c31 c30 v xor2

Xz1 fas[31:0:4] fas[30:0:4] fas[29:0:4] fas[28:0:4] temp[7:0] nor4
Xz2 temp[7:4] temp[3:0] temp_final[1:0] nand4
Xz3 temp_final[1:0] z nor2
.ends


* 32-bit comparator
.subckt cmp32 n v z op[2:1] fcmp[31:0]
Xsub1 n v nv xor2
Xsub2 op1 z opz nand2
Xsub3 op2 nv opnv nand2
Xsub4 opz opnv fcmp0 nand2

.connect fcmp[31:1] 0
.ends

* 32-bit bitwise boolean circuit
.subckt bool32 a[31:0] b[31:0] op[3:0] fbool[31:0]
Xmux4 a[31:0] b[31:0] op0#32 op1#32 op2#32 op3#32 fbool[31:0] mux4
.ends

* 32-bit shifter
.subckt shift32 a[31:0] b[4:0] op[1:0] fshift[31:0]
*choose either left or right shift
Xwhich1 op0#32 a[31:0] a[0:31] c[31:0] mux2
*determine sign bit
Xsign1 a31 op1 sign and2 

*16-bit shift (to the left)
Xsixteen1 b4#32 c[31:0] c[15:0] sign#16 d[31:0] mux2 
*8-bit shift
Xeight1 b3#32 d[31:0] d[23:0] sign#8 e[31:0] mux2 
*4-bit shift
Xfour1 b2#32 e[31:0] e[27:0] sign#4 f[31:0] mux2 
*2-bit shift
Xtwo1 b1#32 f[31:0] f[29:0] sign#2 g[31:0] mux2 
*1-bit shift
Xone1 b0#32 g[31:0] g[30:0] sign h[31:0] mux2
*flip or not again depending on shift chosen
Xwhich2 op0#32 h[31:0] h[0:31] fshift[31:0] mux2
.ends

* 32-bit ALU
.subckt alu32 a[31:0] b[31:0] alufn[5:0] f[31:0]
Xas32 a[31:0] b[31:0] alufn0 fas[31:0] n v z as32
Xbool32 a[31:0] b[31:0] alufn[3:0] fbool[31:0] bool32
Xshift32 a[31:0] b[4:0] alufn[1:0] fshift[31:0] shift32
Xcmp32 n v z alufn[2:1] fcmp[31:0] cmp32
Xop alufn5#32 alufn4#32 fas[31:0] fshift[31:0] fbool[31:0] fcmp[31:0] f[31:0] mux4 
.ends